{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './Navbar';\nimport Web3 from 'web3';\nimport Tether from '../contracts/Tether.json';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                //윈도우 창에서 이더리움이 감지되었을때\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('No ethereum browser detected! check out Metamask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkId, tetherData, tether, tetherBalance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context3.sent;\n                //블록체인 데이터에서 계좌불러옴\n                this.setState({\n                  account: account[0]\n                });\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                //네트워크 ID 가져옴\n                //테더 계약 불러오기\n                tetherData = Tether.networks[networkId];\n\n                if (!tetherData) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address); //abi, 주소 가져옴\n\n                this.setState({\n                  tether: tether\n                }); //상태 업데이트\n\n                _context3.next = 14;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 14:\n                tetherBalance = _context3.sent;\n                //잔액 정보 가져옴\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                });\n                console.log({\n                  balance: tetherBalance\n                });\n                _context3.next = 20;\n                break;\n\n              case 19:\n                window.alert('Error! Tether contract not deployed- no detect nework!');\n\n              case 20:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '0x0',\n      //default\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: '0',\n      rwdBalance: '0',\n      stakingBalance: '0',\n      loading: true //로딩창용\n\n    };\n    return _this;\n  } //리액트 코드 작성\n\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","Navbar","Web3","Tether","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","account","setState","net","getId","networkId","tetherData","networks","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","console","log","balance","props","rwd","decentralBank","rwdBalance","stakingBalance","loading"],"mappings":"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","sourcesContent":["import React,{Component} from 'react'\r\nimport './App.css'\r\nimport Navbar from './Navbar';\r\nimport Web3 from 'web3';\r\nimport Tether from '../contracts/Tether.json';\r\n\r\nclass App extends Component {\r\n\r\n    async UNSAFE_componentWillMount(){  //렌더링하기전에 최우선으로 불러오게함\r\n        await this.loadWeb3()   //메타마스크 연결\r\n        await this.loadBlockchainData() //계좌 데이터 연결\r\n    }\r\n\r\n    async loadWeb3(){\r\n        if(window.ethereum){//윈도우 창에서 이더리움이 감지되었을때\r\n            window.web3=new Web3(window.ethereum)\r\n            await window.ethereum.enable() //이더리움 활성화\r\n    } else if(window.web3){\r\n        window.web3=new Web3(window.web3.currentProvider)\r\n    } else{\r\n        window.alert('No ethereum browser detected! check out Metamask!')\r\n    }\r\n}\r\n    async loadBlockchainData(){\r\n        const web3=window.web3\r\n        const account=await web3.eth.getAccounts()  //블록체인 데이터에서 계좌불러옴\r\n        this.setState({account: account[0]})\r\n        const networkId=await web3.eth.net.getId()  //네트워크 ID 가져옴\r\n        //테더 계약 불러오기\r\n        const tetherData= Tether.networks[networkId]\r\n        if(tetherData){\r\n            const tether=new web3.eth.Contract(Tether.abi, tetherData.address)//abi, 주소 가져옴\r\n            this.setState({tether})//상태 업데이트\r\n            let tetherBalance=await tether.methods.balanceOf(this.state.account).call()//잔액 정보 가져옴\r\n            this.setState({tetherBalance: tetherBalance.toString()})\r\n            console.log({balance: tetherBalance})\r\n        }else{\r\n            window.alert('Error! Tether contract not deployed- no detect nework!')\r\n        }\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            account: '0x0', //default\r\n            tether: {},\r\n            rwd: {},\r\n            decentralBank:{},\r\n            tetherBalance: '0',\r\n            rwdBalance:'0',\r\n            stakingBalance:'0',\r\n            loading: true//로딩창용\r\n\r\n        }\r\n    }\r\n    \r\n    //리액트 코드 작성\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Navbar account={this.state.account}/>\r\n                <div className='text-center'>\r\n                    <h1></h1>\r\n                </div>\r\n            </div>\r\n        )    \r\n    }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}